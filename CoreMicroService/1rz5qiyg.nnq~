using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using CoreWebAPI.Models;
using Microsoft.AspNetCore.Rewrite;

namespace CoreWebAPI
{
    public class Startup
    {
        public Startup(IHostingEnvironment env)
        {
            var builder = new ConfigurationBuilder()
                .SetBasePath(env.ContentRootPath)
                .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
                .AddJsonFile($"appsettings.{env.EnvironmentName}.json", optional: true);
                
            if (env.IsEnvironment("Development"))
            {
                
                // This will push telemetry data through Application Insights pipeline faster, allowing you to view results immediately.
                builder.AddApplicationInsightsSettings(developerMode: true);
            }

            builder.AddEnvironmentVariables();
            Configuration = builder.Build();
        }

        public IConfigurationRoot Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container
        public void ConfigureServices(IServiceCollection services)
        {
            // Add framework services.
            services.AddApplicationInsightsTelemetry(Configuration);
            services.AddOptions();
            services.AddMvc();
            //services.AddSingleton<IApiRepository, ApiRepository>();
            services.AddTransient<IApiRepository, ApiRepository>();
            var testSettings = Configuration.GetSection("TestSettings");
            services.Configure<TestSetting>(testSettings);
            
            
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {
            loggerFactory.AddConsole(Configuration.GetSection("Logging"));
            loggerFactory.AddDebug();

            app.UseApplicationInsightsRequestTelemetry();

            app.UseApplicationInsightsExceptionTelemetry();

            if (env.EnvironmentName == "Development")
            {
                app.UseBrowserLink();
                app.UseDeveloperExceptionPage();

            }
            app.UseMvc();
            var options = new RewriteOptions()
                .AddRedirectToHttpsPermanent();
            app.UseRewriter(options);

        }

        /// <summary>
        /// This is an override method that will come in play instead of Configure(...) method, provided ASPNETCORE_Environment is set to Development(Remember method name should be in same case as environment)
        /// </summary>
        /// <param name="app"></param>
        /// <param name="env"></param>
        /// <param name="loggerFactory"></param>
        public void Configuredevelopment(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {
            loggerFactory.AddConsole(Configuration.GetSection("Logging"));
            loggerFactory.AddDebug();

            app.UseApplicationInsightsRequestTelemetry();

            app.UseApplicationInsightsExceptionTelemetry();

            if (env.EnvironmentName == "Development")
            {
                app.UseBrowserLink();
            }
            app.UseMvc();
        }
    }
}
